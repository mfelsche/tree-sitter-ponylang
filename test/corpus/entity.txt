====
Main
====

"""
module docstring
"""

actor Main
  """
  actor docstring
  """

  let x: U8
    "field docstring"
  var y: String ref = "default"
    """
    long field docstring of field with default value
    """
  embed z: (U8 & Real[U8])

  new ref create(env: Env) =>
    """
    constructor docstring
    """
    consume env

  be with_param[Type: Constraint](arg: Type) =>
    "snot"

---

(source_file 
  (string) 
  (entity 
    entity_type: (entity_type)
    name: (identifier) 
    docstring: (string) 
    fields: (fields 
      (field 
        name: (identifier) 
        type: (type name: (identifier)) 
        docstring: (string)
      )
      (field 
        name: (identifier)
        type: (type 
          name: (identifier) 
          cap: (cap)) 
        default: (string)
        docstring: (string)
      )
      (field 
        name: (identifier) 
        type: (type (isect_type name: (identifier) name: (identifier) typeargs: (typeargs (type name: (identifier)))))
      )
    )
    methods: (methods
      (method 
        receiver_cap: (cap)
        name: (identifier) 
        params: (params (param (identifier) (type name: (identifier)))) 
        body: (block 
          (string) 
          (consume (identifier)))
      )
      (method
        name: (identifier)
        typeparams: (typeparams
         (typeparam
           name: (identifier)
           constraint: (type name: (identifier))
         )
        )
        params: (params
         (param (identifier) (type name: (identifier)))
        )
        body: (block (string))
     )
    )
  )
)

=============
Method quirks
=============

use "collection" if windows

actor Main
  new create(env: Env) =>
    env.out.print("awesome" * 2)

  fun ref awesome(): Bool => true

  be yeah[Arg: Constraint](foo: Array[U8]) =>
    foo~partial(56.7)
---
(source_file
  (use (string) 'if' (identifier))
)
